# Generated by Django 5.1.6 on 2025-03-04 07:39

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

def add_buydown_type_data(apps, schema_editor):
    BuydownType = apps.get_model('webapp', 'BuydownType')
    buydownTypes = ['Temporary', 'Permanent', 'Seller-Paid', 'Builder-Paid']
    for buydownType in buydownTypes:
        BuydownType.objects.create(name=buydownType)

def add_county_data(apps, schema_editor):
    County = apps.get_model('webapp', 'County')
    counties = ['King County', 'Los Angeles County', 'Cook County', 'Harris County', 'Miami-Dade County']
    for county in counties:
        County.objects.create(name=county)

def add_documentation_type_data(apps, schema_editor):
    DocumentationType = apps.get_model('webapp', 'DocumentationType')
    documentationTypes = ['Full', 'Stated Income', 'Stated Asset Loan']
    for documentationType in documentationTypes:
        DocumentationType.objects.create(name=documentationType)

def add_escrow_impound_data(apps, schema_editor):
    EscrowImpound = apps.get_model('webapp', 'EscrowImpound')
    escrowImpounds = ['Full Waiver', 'Partial Waiver', 'Conditional Waiver', 'Temporary Waiver', 'No Waiver']
    for escrowImpound in escrowImpounds:
        EscrowImpound.objects.create(name=escrowImpound)

def add_first_homebuyer_data(apps, schema_editor):
    FirstHomebuyer = apps.get_model('webapp', 'FirstHomebuyer')
    firstHomebuyers = ['Federal Loan Programs', 'State and Local Assistance Programs', 'Conventional Loans for First-Time Buyers', 
                       'Down Payment Assistance Programs', 'First-Time Homebuyer Tax Credits', 'Homebuyer Education Courses']
    for firstHomebuyer in firstHomebuyers:
        FirstHomebuyer.objects.create(name=firstHomebuyer)

def add_flex_term_data(apps, schema_editor):
    FlexTerm = apps.get_model('webapp', 'FlexTerm')
    flexTerms = ['5 Years', '10 Years', '15 Years', 
                '20 Years', '25 Years', '30 Years']
    for flexTerm in flexTerms:
        FlexTerm.objects.create(name=flexTerm)

def add_loan_officer_data(apps, schema_editor):
    LoanOfficer = apps.get_model('webapp', 'LoanOfficer')
    loanOfficers = ['Mortgage Loan Officer', 'Commercial Loan Officer', 'Consumer Loan Officer', 
                'Loan Originator', 'Loan Processor', 'Underwriter',
                'Branch Manager', 'Self-Employed Loan Officer']
    for loanOfficer in loanOfficers:
        LoanOfficer.objects.create(name=loanOfficer)

def add_loan_term_data(apps, schema_editor):
    LoanTerm = apps.get_model('webapp', 'LoanTerm')
    loanTerms = ['1 Year', '3 Years', '5 Years', 
                '10 Years', '15 Years', '20 Years',
                '25 Years', '30 Years']
    for loanTerm in loanTerms:
        LoanTerm.objects.create(name=loanTerm)

def add_loan_type_data(apps, schema_editor):
    LoanType = apps.get_model('webapp', 'LoanType')
    loanTypes = ['Conventional', 'Government-Backed', 'Special Purpose', 
                'Interest-Only', 'Refinancing']
    for loanType in loanTypes:
        LoanType.objects.create(name=loanType)

def add_prepayment_penalty_data(apps, schema_editor):
    PrepaymentPenalty = apps.get_model('webapp', 'PrepaymentPenalty')
    prepaymentPenalties = ['Hard Penalty', 'Soft Penalty', 'Step-Down Penalty', 
                'Percentage of Remaining Balance', 'Number of Months Interest', 'Yield Maintenance Penalty']
    for prepaymentPenalty in prepaymentPenalties:
        PrepaymentPenalty.objects.create(name=prepaymentPenalty)

def add_property_state_data(apps, schema_editor):
    PropertyState = apps.get_model('webapp', 'PropertyState')
    propertyStates = ['Active', 'Pending', 'Available', 
                'Rented', 'Owner-Occupied', 'Tenant-Occupied', 'Vacant']
    for propertyState in propertyStates:
        PropertyState.objects.create(name=propertyState)

def add_title_selection_data(apps, schema_editor):
    TitleSelection = apps.get_model('webapp', 'TitleSelection')
    titleSelections = ['Traditional Lenders Policy', 'Sole Ownership', 'Joint Tenancy', 
                'Tenancy in Common', 'Tenancy by the Entirety', 'Community Property', 'Trust Ownership']
    for titleSelection in titleSelections:
        TitleSelection.objects.create(name=titleSelection)

class Migration(migrations.Migration):

    dependencies = [
        ('webapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuydownType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EscrowImpound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FirstHomebuyer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FlexTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LoanOfficer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LoanTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LoanType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PrepaymentPenalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TitleSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='lender',
            name='borrower_name',
            field=models.CharField(default='N/A', max_length=100),
        ),
        migrations.AddField(
            model_name='lender',
            name='dti',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lender',
            name='finance_charges',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='financed_properties',
            field=models.PositiveIntegerField(default='0', validators=[django.core.validators.MaxValueValidator(99)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='hoi',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='loan_amount',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='monthly_debt',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='new_construction',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lender',
            name='number_units',
            field=models.PositiveIntegerField(default='0', validators=[django.core.validators.MaxValueValidator(99)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='rural_property',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lender',
            name='second_loan_amount',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='self_employed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='lender',
            name='taxes',
            field=models.DecimalField(decimal_places=2, default='0.00', max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AddField(
            model_name='lender',
            name='zip_code',
            field=models.CharField(default='00000', max_length=5, validators=[django.core.validators.RegexValidator(message='Enter a valid ZIP code (5 digits)', regex='^\\d{5}$')]),
        ),
        migrations.AddField(
            model_name='lender',
            name='buydown_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.buydowntype'),
        ),
        migrations.AddField(
            model_name='lender',
            name='county',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.county'),
        ),
        migrations.AddField(
            model_name='lender',
            name='documentation_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.documentationtype'),
        ),
        migrations.AddField(
            model_name='lender',
            name='escrow_impound',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.escrowimpound'),
        ),
        migrations.AddField(
            model_name='lender',
            name='first_homebuyer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.firsthomebuyer'),
        ),
        migrations.AddField(
            model_name='lender',
            name='flex_term',
            field=models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, to='webapp.flexterm'),
        ),
        migrations.AddField(
            model_name='lender',
            name='loan_officer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.loanofficer'),
        ),
        migrations.AddField(
            model_name='lender',
            name='loan_term',
            field=models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, to='webapp.loanterm'),
        ),
        migrations.AddField(
            model_name='lender',
            name='loan_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.loantype'),
        ),
        migrations.AddField(
            model_name='lender',
            name='prepayment_penalty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.prepaymentpenalty'),
        ),
        migrations.AddField(
            model_name='lender',
            name='property_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.propertystate'),
        ),
        migrations.AddField(
            model_name='lender',
            name='title_selection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.titleselection'),
        ),
        migrations.RunPython(add_buydown_type_data),
        migrations.RunPython(add_county_data),
        migrations.RunPython(add_documentation_type_data),
        migrations.RunPython(add_escrow_impound_data),
        migrations.RunPython(add_first_homebuyer_data),
        migrations.RunPython(add_flex_term_data),
        migrations.RunPython(add_loan_officer_data),
        migrations.RunPython(add_loan_term_data),
        migrations.RunPython(add_loan_type_data),
        migrations.RunPython(add_prepayment_penalty_data),
        migrations.RunPython(add_property_state_data),
        migrations.RunPython(add_title_selection_data),
    ]
